#!/usr/bin/env python
import argparse
import calendar
import time
import uuid
import json
import logging

import requests

logging.basicConfig()
logger = logging.getLogger('saio-tools-slo')


def log_request(r):
    logger.debug('{0}({1}, {2}): {3}'.format(
        r.request.method, r.status_code, r.headers.get('x-trans-id'), r.url))


def create_segments(storage_url, token, segments, delete_after=300):
    data = []
    for c, o, s in segments:
        container_url = '{0}/{1}'.format(storage_url, c)
        r = requests.put(container_url, headers={'x-auth-token': token})
        log_request(r)

        segment_path = '{0}/{1}'.format(c, o)
        segment_url = '{0}/{1}'.format(storage_url, segment_path)
        headers = {'x-auth-token': token}
        if delete_after > 0:
            headers['x-delete-after'] = delete_after
        r = requests.put(segment_url, headers=headers, data='d' * int(s))
        log_request(r)

        data.append({"path": segment_path,
                     "etag": r.headers.get('etag'),
                     "size_bytes": r.request.headers.get('Content-Length')})
    return data


def create_slo(storage_url, token, manifest, segment_data, delete_after=300):
    c = manifest[0]
    o = manifest[1]
    container_url = '{0}/{1}'.format(storage_url, c)
    r = requests.put(container_url, headers={'x-auth-token': token})
    log_request(r)
    manifest_path = '{0}/{1}'.format(c, o)
    manifest_url = '{0}/{1}'.format(storage_url, manifest_path)
    manifest_data = json.dumps(segment_data)
    headers = {'x-auth-token': token}
    if delete_after > 0:
        headers['x-delete-after'] = delete_after
    r = requests.put(manifest_url, headers=headers,
                     params={'multipart-manifest': 'put'},
                     data=manifest_data)
    log_request(r)


def remove_objects(storage_url, token, segments):
    for c, o, _ in segments:
        segment_path = '{0}/{1}'.format(c, o)
        segment_url = '{0}/{1}'.format(storage_url, segment_path)
        r = requests.delete(segment_url, headers={'x-auth-token': token})
        log_request(r)

        container_url = '{0}/{1}'.format(storage_url, c)
        r = requests.delete(container_url, headers={'x-auth-token': token})
        log_request(r)


def main():
    parser = argparse.ArgumentParser(
        description='SAIO Tools Static Large Object Helper.')
    parser.add_argument('token')
    parser.add_argument(
        '--storage-url', default='http://127.0.0.1:8080/v1/AUTH_test',
        help='URL to account to create data in.')
    parser.add_argument(
        '--prefix', default='',
        help='Container prefix for created containers.')
    parser.add_argument(
        '--delete-after', type=int, default=300,
        help='Time in seconds to delete the objects after.'
             'If set to 0, the "X-Delete-After" header will not be set.')
    parser.add_argument(
        '--segment-count', type=int, default=3,
        help='Number of segments to create per SLO.')
    parser.add_argument(
        '--segment-size', type=int, default=10,
        help='Size in bytes to create each segment.')
    parser.add_argument(
        '--cleanup', action='store_true', default=False,
        help='If set, created containers and objects will be removed '
             'before the program terminates.')
    parser.add_argument(
        '--verbose', action='store_true', default=False,
        help='Show verbose info.')

    args = vars(parser.parse_args())
    token = args.get('token')
    storage_url = args.get('storage_url')
    if args.get('verbose'):
        logger.setLevel(logging.DEBUG)

    t = calendar.timegm(time.gmtime())

    def rand_container():
        return '{0}slo-T{1}-{2}'.format(args.get('prefix'), t,
                                        uuid.uuid4())

    manifest = (rand_container(), str(uuid.uuid4()), 0)
    segments = [(rand_container(), str(uuid.uuid4()),
                 args.get('segment_size'))
                for i in xrange(args.get('segment_count'))]

    segment_data = create_segments(storage_url, token, segments,
                                   delete_after=args.get('delete_after'))
    create_slo(storage_url, token, manifest, segment_data,
               delete_after=args.get('delete_after'))

    cmd = ('curl -i -XGET '
           '-H"x-auth-token: {0}" {1}/{2}/{3}')
    print cmd.format(token, storage_url, manifest[0], manifest[1])

    if args.get('cleanup'):
        remove_objects(storage_url, token, segments)
        remove_objects(storage_url, token, [manifest])


if __name__ == '__main__':
    main()
